"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v5.28.3
// source: protos/filterdata.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.FilterDataClient = exports.FilterDataService = exports.FilterDataReply = exports.FilterDataRequest = exports.protobufPackage = void 0;
/* eslint-disable */
var wire_1 = require("@bufbuild/protobuf/wire");
var grpc_js_1 = require("@grpc/grpc-js");
exports.protobufPackage = "filterData";
function createBaseFilterDataRequest() {
    return {};
}
exports.FilterDataRequest = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseFilterDataRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    create: function (base) {
        return exports.FilterDataRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (_) {
        var message = createBaseFilterDataRequest();
        return message;
    },
};
function createBaseFilterDataReply() {
    return { result: "" };
}
exports.FilterDataReply = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.result !== "") {
            writer.uint32(10).string(message.result);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseFilterDataReply();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.result = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return { result: isSet(object.result) ? globalThis.String(object.result) : "" };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.result !== "") {
            obj.result = message.result;
        }
        return obj;
    },
    create: function (base) {
        return exports.FilterDataReply.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseFilterDataReply();
        message.result = (_a = object.result) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
exports.FilterDataService = {
    getFilterData: {
        path: "/filterData.FilterData/GetFilterData",
        requestStream: false,
        responseStream: false,
        requestSerialize: function (value) { return Buffer.from(exports.FilterDataRequest.encode(value).finish()); },
        requestDeserialize: function (value) { return exports.FilterDataRequest.decode(value); },
        responseSerialize: function (value) { return Buffer.from(exports.FilterDataReply.encode(value).finish()); },
        responseDeserialize: function (value) { return exports.FilterDataReply.decode(value); },
    },
};
exports.FilterDataClient = (0, grpc_js_1.makeGenericClientConstructor)(exports.FilterDataService, "filterData.FilterData");
function isSet(value) {
    return value !== null && value !== undefined;
}
