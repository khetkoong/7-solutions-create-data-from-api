"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v5.28.3
// source: myname.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.MyNameClient = exports.MyNameService = exports.MyNameReply = exports.MyNameRequest = exports.protobufPackage = void 0;
/* eslint-disable */
var wire_1 = require("@bufbuild/protobuf/wire");
var grpc_js_1 = require("@grpc/grpc-js");
exports.protobufPackage = "myname";
function createBaseMyNameRequest() {
    return { name: "" };
}
exports.MyNameRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMyNameRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        return obj;
    },
    create: function (base) {
        return exports.MyNameRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseMyNameRequest();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseMyNameReply() {
    return { message: "" };
}
exports.MyNameReply = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.message !== "") {
            writer.uint32(10).string(message.message);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMyNameReply();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.message = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return { message: isSet(object.message) ? globalThis.String(object.message) : "" };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.message !== "") {
            obj.message = message.message;
        }
        return obj;
    },
    create: function (base) {
        return exports.MyNameReply.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseMyNameReply();
        message.message = (_a = object.message) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
exports.MyNameService = {
    sayMyName: {
        path: "/myname.MyName/SayMyName",
        requestStream: false,
        responseStream: false,
        requestSerialize: function (value) { return Buffer.from(exports.MyNameRequest.encode(value).finish()); },
        requestDeserialize: function (value) { return exports.MyNameRequest.decode(value); },
        responseSerialize: function (value) { return Buffer.from(exports.MyNameReply.encode(value).finish()); },
        responseDeserialize: function (value) { return exports.MyNameReply.decode(value); },
    },
};
exports.MyNameClient = (0, grpc_js_1.makeGenericClientConstructor)(exports.MyNameService, "myname.MyName");
function isSet(value) {
    return value !== null && value !== undefined;
}
