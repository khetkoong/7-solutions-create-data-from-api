// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v5.28.3
// source: protos/filterdata.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "filterData";

export interface FilterDataRequest {
}

export interface FilterDataReply {
  result: string;
}

function createBaseFilterDataRequest(): FilterDataRequest {
  return {};
}

export const FilterDataRequest: MessageFns<FilterDataRequest> = {
  encode(_: FilterDataRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FilterDataRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFilterDataRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): FilterDataRequest {
    return {};
  },

  toJSON(_: FilterDataRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<FilterDataRequest>, I>>(base?: I): FilterDataRequest {
    return FilterDataRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FilterDataRequest>, I>>(_: I): FilterDataRequest {
    const message = createBaseFilterDataRequest();
    return message;
  },
};

function createBaseFilterDataReply(): FilterDataReply {
  return { result: "" };
}

export const FilterDataReply: MessageFns<FilterDataReply> = {
  encode(message: FilterDataReply, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.result !== "") {
      writer.uint32(10).string(message.result);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FilterDataReply {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFilterDataReply();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.result = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FilterDataReply {
    return { result: isSet(object.result) ? globalThis.String(object.result) : "" };
  },

  toJSON(message: FilterDataReply): unknown {
    const obj: any = {};
    if (message.result !== "") {
      obj.result = message.result;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FilterDataReply>, I>>(base?: I): FilterDataReply {
    return FilterDataReply.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FilterDataReply>, I>>(object: I): FilterDataReply {
    const message = createBaseFilterDataReply();
    message.result = object.result ?? "";
    return message;
  },
};

export type FilterDataService = typeof FilterDataService;
export const FilterDataService = {
  getFilterData: {
    path: "/filterData.FilterData/GetFilterData",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: FilterDataRequest) => Buffer.from(FilterDataRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => FilterDataRequest.decode(value),
    responseSerialize: (value: FilterDataReply) => Buffer.from(FilterDataReply.encode(value).finish()),
    responseDeserialize: (value: Buffer) => FilterDataReply.decode(value),
  },
} as const;

export interface FilterDataServer extends UntypedServiceImplementation {
  getFilterData: handleUnaryCall<FilterDataRequest, FilterDataReply>;
}

export interface FilterDataClient extends Client {
  getFilterData(
    request: FilterDataRequest,
    callback: (error: ServiceError | null, response: FilterDataReply) => void,
  ): ClientUnaryCall;
  getFilterData(
    request: FilterDataRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: FilterDataReply) => void,
  ): ClientUnaryCall;
  getFilterData(
    request: FilterDataRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: FilterDataReply) => void,
  ): ClientUnaryCall;
}

export const FilterDataClient = makeGenericClientConstructor(FilterDataService, "filterData.FilterData") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): FilterDataClient;
  service: typeof FilterDataService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
